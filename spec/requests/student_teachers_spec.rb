require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/student_teachers", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # StudentTeacher. As you add validations to StudentTeacher, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      student_distribution_id: StudentDistribution.create!(
        student: Student.create!(full_name: "Student1Distr", edebo_person_code: "1555"),
        group: Group.create!(group: "Group1ForStudentDistr"),
        edebo_study_code: "1111",
        email: "stud1-group1@email.com"
      ).id,
      teacher_distribution_id: TeacherDistribution.create!(
        person: Person.create!(full_name: "Person1Distr", email: "email1@email.com"),
        unit: Unit.create!(name: "Unit1ForDistr", unit_type: "Department")
      ).id
    }
  }

  let(:new_attributes) {
    {
      student_distribution_id: StudentDistribution.create!(
        student: Student.create!(full_name: "Student2Distr", edebo_person_code: "2555"),
        group: Group.create!(group: "Group2ForStudentDistr"),
        edebo_study_code: "2222",
        email: "stud2-group2@email.com"
      ).id,
      teacher_distribution_id: TeacherDistribution.create!(
        person: Person.create!(full_name: "Person2Distr", email: "email2@email.com"),
        unit: Unit.create!(name: "Unit2ForDistr", unit_type: "Department")
      ).id
    }
  }

  let(:invalid_attributes) { {student_distribution: nil, teacher_distribution: nil} }

  describe "GET /index" do
    it "renders a successful response" do
      StudentTeacher.create! valid_attributes
      get student_teachers_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      student_teacher = StudentTeacher.create! valid_attributes
      get student_teacher_url(student_teacher)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_student_teacher_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      student_teacher = StudentTeacher.create! valid_attributes
      get edit_student_teacher_url(student_teacher)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      let(:valid_attributes_for_post) {
        {
          student_distribution_id: StudentDistribution.create!(
            student: Student.create!(full_name: "Student1Distr", edebo_person_code: "1555"),
            group: Group.create!(group: "Group1ForStudentDistr"),
            edebo_study_code: "1111",
            email: "stud1-group1@email.com"
          ).id,
          teacher_distribution_id: TeacherDistribution.create!(
            person: Person.create!(full_name: "Person1Distr", email: "email1@email.com"),
            unit: Unit.create!(name: "Unit1ForDistr", unit_type: "Department")
          ).id
        }
      }

      it "creates a new StudentTeacher" do
        expect {
          post student_teachers_url, params: { student_teacher: valid_attributes_for_post }
        }.to change(StudentTeacher, :count).by(1)
      end

      it "redirects to the created student_teacher" do
        post student_teachers_url, params: { student_teacher: valid_attributes_for_post }
        expect(response).to redirect_to(student_teacher_url(StudentTeacher.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new StudentTeacher" do
        expect {
          post student_teachers_url, params: { student_teacher: invalid_attributes }
        }.to change(StudentTeacher, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post student_teachers_url, params: { student_teacher: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do

      it "updates the requested student_teacher" do
        student_teacher = StudentTeacher.create! valid_attributes
        patch student_teacher_url(student_teacher), params: { student_teacher: new_attributes }
        student_teacher.reload
        expect(student_teacher[:student_distribution_id] ).to eq(new_attributes[:student_distribution_id])
        expect(student_teacher[:teacher_distribution_id] ).to eq(new_attributes[:teacher_distribution_id])
      end

      it "redirects to the student_teacher" do
        student_teacher = StudentTeacher.create! valid_attributes
        patch student_teacher_url(student_teacher), params: { student_teacher: new_attributes }
        student_teacher.reload
        expect(response).to redirect_to(student_teacher_url(student_teacher))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        StudentTeacher.create! valid_attributes
        student_teacher = StudentTeacher.create! new_attributes
        patch student_teacher_url(student_teacher), params: { student_teacher: valid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested student_teacher" do
      student_teacher = StudentTeacher.create! valid_attributes
      expect {
        delete student_teacher_url(student_teacher)
      }.to change(StudentTeacher, :count).by(-1)
    end

    it "redirects to the student_teachers list" do
      student_teacher = StudentTeacher.create! valid_attributes
      delete student_teacher_url(student_teacher)
      expect(response).to redirect_to(student_teachers_url)
    end
  end
end