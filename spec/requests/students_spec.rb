require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/students", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Student. As you add validations to Student, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {full_name: "Full Name 1", edebo_person_code: "1111111"}
  }

  let(:valid_attributes_too) {
    {full_name: "Full Name 1", edebo_person_code: "222222"}
  }

  let(:invalid_attributes) {
    {full_name: "", edebo_person_code: ""}
  }

  let(:not_unique_attributes) {
    {full_name: "Full Name 1", edebo_person_code: "1111111"}
  }


  describe "GET /index" do
    it "renders a successful response" do
      Student.create! valid_attributes
      get students_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      student = Student.create! valid_attributes
      get student_url(student)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_student_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      student = Student.create! valid_attributes
      get edit_student_url(student)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Student" do
        expect {
          post students_url, params: { student: valid_attributes }
        }.to change(Student, :count).by(1)
      end

      it "redirects to the created student" do
        post students_url, params: { student: valid_attributes }
        expect(response).to redirect_to(student_url(Student.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Student" do
        expect {
          post students_url, params: { student: invalid_attributes }
        }.to change(Student, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post students_url, params: { student: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {full_name: "Full Name 2", edebo_person_code: "2222222"}
      }

      it "updates the requested student" do
        student = Student.create! valid_attributes
        patch student_url(student), params: { student: new_attributes }
        student.reload
        expect(student.full_name).to eq(new_attributes[:full_name])
      end

      it "redirects to the student" do
        student = Student.create! valid_attributes
        patch student_url(student), params: { student: new_attributes }
        student.reload
        expect(response).to redirect_to(student_url(student))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        student = Student.create! valid_attributes
        patch student_url(student), params: { student: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end

    context "with not unique parameters" do

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        student = Student.create! valid_attributes
        student_too = Student.create! valid_attributes_too
        patch student_url(student_too), params: { student: not_unique_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end

  end

  describe "DELETE /destroy" do
    it "destroys the requested student" do
      student = Student.create! valid_attributes
      expect {
        delete student_url(student)
      }.to change(Student, :count).by(-1)
    end

    it "redirects to the students list" do
      student = Student.create! valid_attributes
      delete student_url(student)
      expect(response).to redirect_to(students_url)
    end
  end
end
